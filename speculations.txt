	We will be tackling the inventory with at least one table depending on the information that we find necessary as we build and develop the inventory tracker. AKA agile programming. Keeping the idea open to using more then one table will help the flexibility of both the back-end and front-end encase we need to expand or add others field. This will help avoid redundancy in records of in inventory table(s). 
	We will keep track of vendors so as the list get large enough we will be able to trend out possible inconsistent values, ie Price gouging, or items that are defective. If my popcorn machine is broken and a vendor took it for repairs, I would want to call them. Also as inventory levels are diminishing we would want to generate an order for all items purchased from that vendor. Also to keep track of items that were purchased from a vendor encase it was awesome or horrible.
	For each till, we want to track when an employee logs into the system and stamp it with their unique employee id and the time. For each transaction, the start and end times can be recorded (not visible to the user). Up-selling, protection plans or anything related should be prompted when an item that is eligible gets scanned, or the customer’s subtotal is close to a specific dollar amount associated with rewards, discounts or other promotional deals.
	For each transaction, we would want to generate a temporary table that would be combined with all transactions for a given employee’s session. Items sold by unit should be individually tracked (ex. Scan each individual item). For bulk or volume sales, scan once and enter a unit measurement based upon the item being sold. Combos should be combined to generate the price, but each item should be tracked separately. Promotional/sale items should be tracked in a similar manner, subtract from total inventory but recognize the difference in price (from retail). Coupons should be done this way as well. For refunds, if the item is defective it shouldn’t be added back to inventory, otherwise add it back. Mistakes in transactions should be correctable via a void transaction function, as well as a void item function.
	The server should track all vendor, inventory, sales reports, order reports, etc. The tills should operate independently and just generate transaction reports that are sent to the server, which then updates the related tables/records. If the server is down, you can only sell items that are physically on hand; you have no way to know if you have tickets left for a movie, but you can sell concessions and other items that can be later be reconciled with the server. 
